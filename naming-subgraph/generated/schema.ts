// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Kong extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Kong entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Kong entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Kong", id.toString(), this);
  }

  static load(id: string): Kong | null {
    return store.get("Kong", id) as Kong | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get name(): Array<string> {
    let value = this.get("name");
    return value.toStringArray();
  }

  set name(value: Array<string>) {
    this.set("name", Value.fromStringArray(value));
  }

  get bio(): Array<string> {
    let value = this.get("bio");
    return value.toStringArray();
  }

  set bio(value: Array<string>) {
    this.set("bio", Value.fromStringArray(value));
  }
}

export class Name extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Name entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Name entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Name", id.toString(), this);
  }

  static load(id: string): Name | null {
    return store.get("Name", id) as Name | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get kong(): string {
    let value = this.get("kong");
    return value.toString();
  }

  set kong(value: string) {
    this.set("kong", Value.fromString(value));
  }
}

export class Bio extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Bio entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Bio entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Bio", id.toString(), this);
  }

  static load(id: string): Bio | null {
    return store.get("Bio", id) as Bio | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get value(): string {
    let value = this.get("value");
    return value.toString();
  }

  set value(value: string) {
    this.set("value", Value.fromString(value));
  }

  get kong(): string {
    let value = this.get("kong");
    return value.toString();
  }

  set kong(value: string) {
    this.set("kong", Value.fromString(value));
  }
}
